# Generated by Django 5.2.4 on 2025-08-01 17:05

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='NotesCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('video', 'Video'), ('mcq', 'MCQ'), ('clinical_case', 'Clinical Case'), ('q_bank', 'Q-Bank'), ('flash_card', 'Flash Card'), ('previous_papers', 'Previous Year Papers')], max_length=50, unique=True, verbose_name='Category Name')),
                ('display_name', models.CharField(max_length=100, verbose_name='Display Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('topics_count', models.PositiveIntegerField(default=0, verbose_name='Topics Count')),
                ('modules_count', models.PositiveIntegerField(default=0, verbose_name='Modules Count')),
                ('videos_count', models.PositiveIntegerField(default=0, verbose_name='Videos Count')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Featured')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Notes Category',
                'verbose_name_plural': 'Notes Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='NotesMCQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(verbose_name='Question Text')),
                ('explanation', models.TextField(blank=True, verbose_name='Explanation')),
                ('attempts_count', models.PositiveIntegerField(default=0, verbose_name='Attempts Count')),
                ('correct_answers_count', models.PositiveIntegerField(default=0, verbose_name='Correct Answers Count')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Notes MCQ',
                'verbose_name_plural': 'Notes MCQs',
            },
        ),
        migrations.CreateModel(
            name='NotesModule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Module Title')),
                ('module_type', models.CharField(choices=[('video', 'Video'), ('mcq', 'MCQ'), ('clinical_case', 'Clinical Case'), ('q_bank', 'Q-Bank'), ('flash_card', 'Flash Card'), ('previous_papers', 'Previous Year Papers')], max_length=20, verbose_name='Module Type')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('content_url', models.URLField(blank=True, verbose_name='Content URL')),
                ('duration_minutes', models.PositiveIntegerField(blank=True, null=True, verbose_name='Duration (Minutes)')),
                ('views_count', models.PositiveIntegerField(default=0, verbose_name='Views Count')),
                ('likes_count', models.PositiveIntegerField(default=0, verbose_name='Likes Count')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('is_premium', models.BooleanField(default=False, verbose_name='Premium Content')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Display Order')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Notes Module',
                'verbose_name_plural': 'Notes Modules',
                'ordering': ['topic', 'order', 'title'],
            },
        ),
        migrations.CreateModel(
            name='NotesStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True, verbose_name='Date')),
                ('total_views', models.PositiveIntegerField(default=0, verbose_name='Total Views')),
                ('total_modules_accessed', models.PositiveIntegerField(default=0, verbose_name='Total Modules Accessed')),
                ('total_unique_users', models.PositiveIntegerField(default=0, verbose_name='Total Unique Users')),
                ('video_views', models.PositiveIntegerField(default=0, verbose_name='Video Views')),
                ('mcq_attempts', models.PositiveIntegerField(default=0, verbose_name='MCQ Attempts')),
                ('clinical_case_views', models.PositiveIntegerField(default=0, verbose_name='Clinical Case Views')),
                ('q_bank_attempts', models.PositiveIntegerField(default=0, verbose_name='Q-Bank Attempts')),
                ('flash_card_views', models.PositiveIntegerField(default=0, verbose_name='Flash Card Views')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Notes Statistics',
                'verbose_name_plural': 'Notes Statistics',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='NotesMCQOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option_text', models.CharField(max_length=500, verbose_name='Option Text')),
                ('is_correct', models.BooleanField(default=False, verbose_name='Is Correct Answer')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Display Order')),
                ('mcq', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='notes.notesmcq')),
            ],
            options={
                'verbose_name': 'Notes MCQ Option',
                'verbose_name_plural': 'Notes MCQ Options',
                'ordering': ['mcq', 'order'],
            },
        ),
        migrations.AddField(
            model_name='notesmcq',
            name='module',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='mcq', to='notes.notesmodule'),
        ),
        migrations.CreateModel(
            name='NotesFlashCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('front_text', models.TextField(verbose_name='Front Text')),
                ('back_text', models.TextField(verbose_name='Back Text')),
                ('category', models.CharField(blank=True, max_length=100, verbose_name='Category')),
                ('views_count', models.PositiveIntegerField(default=0, verbose_name='Views Count')),
                ('mastery_level', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Mastery Level (%)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('module', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='flash_card', to='notes.notesmodule')),
            ],
            options={
                'verbose_name': 'Notes Flash Card',
                'verbose_name_plural': 'Notes Flash Cards',
            },
        ),
        migrations.CreateModel(
            name='NotesClinicalCase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case_title', models.CharField(max_length=255, verbose_name='Case Title')),
                ('patient_history', models.TextField(verbose_name='Patient History')),
                ('clinical_findings', models.TextField(verbose_name='Clinical Findings')),
                ('diagnosis', models.TextField(blank=True, verbose_name='Diagnosis')),
                ('treatment', models.TextField(blank=True, verbose_name='Treatment')),
                ('views_count', models.PositiveIntegerField(default=0, verbose_name='Views Count')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('module', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='clinical_case', to='notes.notesmodule')),
            ],
            options={
                'verbose_name': 'Notes Clinical Case',
                'verbose_name_plural': 'Notes Clinical Cases',
            },
        ),
        migrations.CreateModel(
            name='NotesPreviousPapers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paper_title', models.CharField(max_length=255, verbose_name='Paper Title')),
                ('year', models.PositiveIntegerField(verbose_name='Year')),
                ('exam_type', models.CharField(max_length=100, verbose_name='Exam Type')),
                ('paper_url', models.URLField(blank=True, verbose_name='Paper URL')),
                ('solution_url', models.URLField(blank=True, verbose_name='Solution URL')),
                ('total_questions', models.PositiveIntegerField(default=0, verbose_name='Total Questions')),
                ('duration_minutes', models.PositiveIntegerField(default=0, verbose_name='Duration (Minutes)')),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=20, verbose_name='Difficulty Level')),
                ('views_count', models.PositiveIntegerField(default=0, verbose_name='Views Count')),
                ('downloads_count', models.PositiveIntegerField(default=0, verbose_name='Downloads Count')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('module', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='previous_papers', to='notes.notesmodule')),
            ],
            options={
                'verbose_name': 'Notes Previous Year Papers',
                'verbose_name_plural': 'Notes Previous Year Papers',
            },
        ),
        migrations.CreateModel(
            name='NotesQBank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(verbose_name='Question Text')),
                ('explanation', models.TextField(blank=True, verbose_name='Explanation')),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=20, verbose_name='Difficulty Level')),
                ('attempts_count', models.PositiveIntegerField(default=0, verbose_name='Attempts Count')),
                ('correct_answers_count', models.PositiveIntegerField(default=0, verbose_name='Correct Answers Count')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('module', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='q_bank', to='notes.notesmodule')),
            ],
            options={
                'verbose_name': 'Notes Q-Bank',
                'verbose_name_plural': 'Notes Q-Banks',
            },
        ),
        migrations.CreateModel(
            name='NotesQBankOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option_text', models.CharField(max_length=500, verbose_name='Option Text')),
                ('is_correct', models.BooleanField(default=False, verbose_name='Is Correct Answer')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Display Order')),
                ('q_bank', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='notes.notesqbank')),
            ],
            options={
                'verbose_name': 'Notes Q-Bank Option',
                'verbose_name_plural': 'Notes Q-Bank Options',
                'ordering': ['q_bank', 'order'],
            },
        ),
        migrations.CreateModel(
            name='NotesTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Topic Title')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('modules_count', models.PositiveIntegerField(default=0, verbose_name='Modules Count')),
                ('videos_count', models.PositiveIntegerField(default=0, verbose_name='Videos Count')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Featured')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Display Order')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='notes.notescategory')),
            ],
            options={
                'verbose_name': 'Notes Topic',
                'verbose_name_plural': 'Notes Topics',
                'ordering': ['category', 'order', 'title'],
                'unique_together': {('category', 'title')},
            },
        ),
        migrations.AddField(
            model_name='notesmodule',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='notes.notestopic'),
        ),
        migrations.CreateModel(
            name='NotesVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video_url', models.URLField(verbose_name='Video URL')),
                ('thumbnail_url', models.URLField(blank=True, verbose_name='Thumbnail URL')),
                ('duration_seconds', models.PositiveIntegerField(verbose_name='Duration (Seconds)')),
                ('quality', models.CharField(choices=[('360p', '360p'), ('480p', '480p'), ('720p', '720p'), ('1080p', '1080p')], default='720p', max_length=20, verbose_name='Video Quality')),
                ('views_count', models.PositiveIntegerField(default=0, verbose_name='Views Count')),
                ('likes_count', models.PositiveIntegerField(default=0, verbose_name='Likes Count')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('module', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='video', to='notes.notesmodule')),
            ],
            options={
                'verbose_name': 'Notes Video',
                'verbose_name_plural': 'Notes Videos',
            },
        ),
        migrations.AlterUniqueTogether(
            name='notesmodule',
            unique_together={('topic', 'title')},
        ),
    ]
